var search_data = {"index":{"searchIndex":["actioncontroller","base","activerecord","base","camping","datamapper","object","ramaze","controller","scaffoldingextensions","actioncontroller","actioncontrollerhelper","activerecord","campingcontroller","campinghelper","controller","datamapper","helper","jqueryhelper","metaactioncontroller","metaactiverecord","metacampingcontroller","metacontroller","metadatamapper","metamodel","metaoverridable","metaramazecontroller","metasequel","metasinatracontroller","model","overridable","prototypehelper","rackcontroller","redirect","ramazecontroller","sequel","sinatracontroller","sinatrahelper","sequel","model","sinatra","base","test","unit","testcase","add_scaffolding_methods()","all_models()","auto_complete_css()","call()","call()","extended()","get_key_array_safe()","get_ordering_options()","javascript_library=()","scaffold_r()","scaffold_add_associated_object()","scaffold_add_associated_object()","scaffold_add_associated_object()","scaffold_add_associated_objects()","scaffold_all_associations()","scaffold_all_associations()","scaffold_all_associations()","scaffold_associated_class()","scaffold_associated_class()","scaffold_associated_class()","scaffold_associated_human_name()","scaffold_associated_name()","scaffold_associated_objects()","scaffold_associated_objects()","scaffold_associated_objects()","scaffold_association()","scaffold_association()","scaffold_association()","scaffold_association_find_object()","scaffold_association_find_objects()","scaffold_association_type()","scaffold_association_type()","scaffold_association_type()","scaffold_association_use_auto_complete()","scaffold_associations()","scaffold_associations()","scaffold_associations()","scaffold_attribute_value()","scaffold_attribute_value()","scaffold_attribute_value()","scaffold_auto_complete_associations()","scaffold_auto_complete_find()","scaffold_browse_find_objects()","scaffold_column_name()","scaffold_column_options()","scaffold_column_type()","scaffold_column_type_options()","scaffold_default_action()","scaffold_destroy()","scaffold_destroy()","scaffold_destroy()","scaffold_error_messages()","scaffold_error_raised()","scaffold_error_raised()","scaffold_error_raised()","scaffold_field_id()","scaffold_fields()","scaffold_fields()","scaffold_fields()","scaffold_find_object()","scaffold_find_object()","scaffold_find_objects()","scaffold_foreign_key()","scaffold_foreign_key()","scaffold_foreign_key()","scaffold_get_object()","scaffold_get_object()","scaffold_get_object()","scaffold_get_objects()","scaffold_get_objects()","scaffold_get_objects()","scaffold_habtm_associations()","scaffold_habtm_reflection_options()","scaffold_habtm_reflection_options()","scaffold_habtm_reflection_options()","scaffold_habtm_test()","scaffold_human_name()","scaffold_id()","scaffold_id()","scaffold_id()","scaffold_include()","scaffold_merge_records()","scaffold_name()","scaffold_name()","scaffold_name_with_id()","scaffold_new_associated_object_values()","scaffold_new_associated_object_values()","scaffold_new_associated_object_values()","scaffold_new_object()","scaffold_new_object()","scaffold_primary_key()","scaffold_primary_key()","scaffold_primary_key()","scaffold_remove_associated_objects()","scaffold_save()","scaffold_save()","scaffold_save()","scaffold_search()","scaffold_search_null_options()","scaffold_search_object()","scaffold_select_order()","scaffold_session()","scaffold_session_conditions()","scaffold_session_value_matches?()","scaffold_setup_helper()","scaffold_setup_helper()","scaffold_show_association_links?()","scaffold_table_class()","scaffold_table_column_type()","scaffold_table_column_type()","scaffold_table_column_type()","scaffold_table_name()","scaffold_table_name()","scaffold_table_name()","scaffold_template_dir()","scaffold_test()","scaffold_transaction()","scaffold_unassociated_objects()","scaffold_update_attributes()","scaffold_use_auto_complete()","scaffold_use_eager_graph()","scaffold_use_references()","scaffold_value()","test_scaffold()","test_scaffold_all_models()","transaction()","mit-license","readme","advanced","camping","controller_spec","conversion","datamapper","merb","model_spec","rack","rails","ramaze","sinatra","testing"],"longSearchIndex":["actioncontroller","actioncontroller::base","activerecord","activerecord::base","camping","datamapper","object","ramaze","ramaze::controller","scaffoldingextensions","scaffoldingextensions::actioncontroller","scaffoldingextensions::actioncontrollerhelper","scaffoldingextensions::activerecord","scaffoldingextensions::campingcontroller","scaffoldingextensions::campinghelper","scaffoldingextensions::controller","scaffoldingextensions::datamapper","scaffoldingextensions::helper","scaffoldingextensions::jqueryhelper","scaffoldingextensions::metaactioncontroller","scaffoldingextensions::metaactiverecord","scaffoldingextensions::metacampingcontroller","scaffoldingextensions::metacontroller","scaffoldingextensions::metadatamapper","scaffoldingextensions::metamodel","scaffoldingextensions::metaoverridable","scaffoldingextensions::metaramazecontroller","scaffoldingextensions::metasequel","scaffoldingextensions::metasinatracontroller","scaffoldingextensions::model","scaffoldingextensions::overridable","scaffoldingextensions::prototypehelper","scaffoldingextensions::rackcontroller","scaffoldingextensions::rackcontroller::redirect","scaffoldingextensions::ramazecontroller","scaffoldingextensions::sequel","scaffoldingextensions::sinatracontroller","scaffoldingextensions::sinatrahelper","sequel","sequel::model","sinatra","sinatra::base","test","test::unit","test::unit::testcase","object#add_scaffolding_methods()","scaffoldingextensions::all_models()","scaffoldingextensions::auto_complete_css()","scaffoldingextensions::rackcontroller::call()","scaffoldingextensions::rackcontroller#call()","scaffoldingextensions::overridable::extended()","object#get_key_array_safe()","object#get_ordering_options()","scaffoldingextensions::javascript_library=()","object#scaffold_r()","scaffoldingextensions::metaactiverecord#scaffold_add_associated_object()","scaffoldingextensions::metadatamapper#scaffold_add_associated_object()","scaffoldingextensions::metasequel#scaffold_add_associated_object()","scaffoldingextensions::metamodel#scaffold_add_associated_objects()","scaffoldingextensions::metaactiverecord#scaffold_all_associations()","scaffoldingextensions::metadatamapper#scaffold_all_associations()","scaffoldingextensions::metasequel#scaffold_all_associations()","scaffoldingextensions::metaactiverecord#scaffold_associated_class()","scaffoldingextensions::metadatamapper#scaffold_associated_class()","scaffoldingextensions::metasequel#scaffold_associated_class()","scaffoldingextensions::metamodel#scaffold_associated_human_name()","scaffoldingextensions::metamodel#scaffold_associated_name()","scaffoldingextensions::metadatamapper#scaffold_associated_objects()","scaffoldingextensions::metamodel#scaffold_associated_objects()","scaffoldingextensions::metasequel#scaffold_associated_objects()","scaffoldingextensions::metaactiverecord#scaffold_association()","scaffoldingextensions::metadatamapper#scaffold_association()","scaffoldingextensions::metasequel#scaffold_association()","scaffoldingextensions::metamodel#scaffold_association_find_object()","scaffoldingextensions::metamodel#scaffold_association_find_objects()","scaffoldingextensions::metaactiverecord#scaffold_association_type()","scaffoldingextensions::metadatamapper#scaffold_association_type()","scaffoldingextensions::metasequel#scaffold_association_type()","scaffoldingextensions::metamodel#scaffold_association_use_auto_complete()","scaffoldingextensions::metaactiverecord#scaffold_associations()","scaffoldingextensions::metadatamapper#scaffold_associations()","scaffoldingextensions::metasequel#scaffold_associations()","scaffoldingextensions::activerecord#scaffold_attribute_value()","scaffoldingextensions::datamapper#scaffold_attribute_value()","scaffoldingextensions::sequel#scaffold_attribute_value()","scaffoldingextensions::metamodel#scaffold_auto_complete_associations()","scaffoldingextensions::metamodel#scaffold_auto_complete_find()","scaffoldingextensions::metamodel#scaffold_browse_find_objects()","scaffoldingextensions::metamodel#scaffold_column_name()","scaffoldingextensions::metamodel#scaffold_column_options()","scaffoldingextensions::metamodel#scaffold_column_type()","scaffoldingextensions::metamodel#scaffold_column_type_options()","scaffoldingextensions::metacontroller#scaffold_default_action()","scaffoldingextensions::metaactiverecord#scaffold_destroy()","scaffoldingextensions::metadatamapper#scaffold_destroy()","scaffoldingextensions::metasequel#scaffold_destroy()","scaffoldingextensions::model#scaffold_error_messages()","scaffoldingextensions::metaactiverecord#scaffold_error_raised()","scaffoldingextensions::metadatamapper#scaffold_error_raised()","scaffoldingextensions::metasequel#scaffold_error_raised()","scaffoldingextensions::metamodel#scaffold_field_id()","scaffoldingextensions::metaactiverecord#scaffold_fields()","scaffoldingextensions::metadatamapper#scaffold_fields()","scaffoldingextensions::metasequel#scaffold_fields()","scaffoldingextensions::metamodel#scaffold_find_object()","scaffoldingextensions::metasequel#scaffold_find_object()","scaffoldingextensions::metamodel#scaffold_find_objects()","scaffoldingextensions::metaactiverecord#scaffold_foreign_key()","scaffoldingextensions::metadatamapper#scaffold_foreign_key()","scaffoldingextensions::metasequel#scaffold_foreign_key()","scaffoldingextensions::metaactiverecord#scaffold_get_object()","scaffoldingextensions::metadatamapper#scaffold_get_object()","scaffoldingextensions::metasequel#scaffold_get_object()","scaffoldingextensions::metaactiverecord#scaffold_get_objects()","scaffoldingextensions::metadatamapper#scaffold_get_objects()","scaffoldingextensions::metasequel#scaffold_get_objects()","scaffoldingextensions::metamodel#scaffold_habtm_associations()","scaffoldingextensions::metaactiverecord#scaffold_habtm_reflection_options()","scaffoldingextensions::metadatamapper#scaffold_habtm_reflection_options()","scaffoldingextensions::metasequel#scaffold_habtm_reflection_options()","test::unit::testcase#scaffold_habtm_test()","scaffoldingextensions::metamodel#scaffold_human_name()","scaffoldingextensions::activerecord#scaffold_id()","scaffoldingextensions::datamapper#scaffold_id()","scaffoldingextensions::sequel#scaffold_id()","scaffoldingextensions::metamodel#scaffold_include()","scaffoldingextensions::metamodel#scaffold_merge_records()","scaffoldingextensions::metamodel#scaffold_name()","scaffoldingextensions::model#scaffold_name()","scaffoldingextensions::model#scaffold_name_with_id()","scaffoldingextensions::metaactiverecord#scaffold_new_associated_object_values()","scaffoldingextensions::metadatamapper#scaffold_new_associated_object_values()","scaffoldingextensions::metasequel#scaffold_new_associated_object_values()","scaffoldingextensions::metamodel#scaffold_new_object()","scaffoldingextensions::metasequel#scaffold_new_object()","scaffoldingextensions::metaactiverecord#scaffold_primary_key()","scaffoldingextensions::metadatamapper#scaffold_primary_key()","scaffoldingextensions::metasequel#scaffold_primary_key()","scaffoldingextensions::metamodel#scaffold_remove_associated_objects()","scaffoldingextensions::metaactiverecord#scaffold_save()","scaffoldingextensions::metadatamapper#scaffold_save()","scaffoldingextensions::metasequel#scaffold_save()","scaffoldingextensions::metamodel#scaffold_search()","scaffoldingextensions::metamodel#scaffold_search_null_options()","scaffoldingextensions::metamodel#scaffold_search_object()","scaffoldingextensions::metamodel#scaffold_select_order()","test::unit::testcase#scaffold_session()","scaffoldingextensions::metamodel#scaffold_session_conditions()","scaffoldingextensions::metamodel#scaffold_session_value_matches?()","scaffoldingextensions::metasinatracontroller#scaffold_setup_helper()","scaffoldingextensions::rackcontroller::scaffold_setup_helper()","scaffoldingextensions::metamodel#scaffold_show_association_links?()","scaffoldingextensions::metamodel#scaffold_table_class()","scaffoldingextensions::metaactiverecord#scaffold_table_column_type()","scaffoldingextensions::metadatamapper#scaffold_table_column_type()","scaffoldingextensions::metasequel#scaffold_table_column_type()","scaffoldingextensions::metaactiverecord#scaffold_table_name()","scaffoldingextensions::metadatamapper#scaffold_table_name()","scaffoldingextensions::metasequel#scaffold_table_name()","scaffoldingextensions::metacontroller#scaffold_template_dir()","test::unit::testcase#scaffold_test()","scaffoldingextensions::metamodel#scaffold_transaction()","scaffoldingextensions::metamodel#scaffold_unassociated_objects()","scaffoldingextensions::metamodel#scaffold_update_attributes()","scaffoldingextensions::metamodel#scaffold_use_auto_complete()","scaffoldingextensions::metasequel#scaffold_use_eager_graph()","scaffoldingextensions::metaactiverecord#scaffold_use_references()","scaffoldingextensions::model#scaffold_value()","test::unit::testcase::test_scaffold()","test::unit::testcase::test_scaffold_all_models()","scaffoldingextensions::metasequel#transaction()","","","","","","","","","","","","","",""],"info":[["ActionController","","ActionController.html","",""],["ActionController::Base","","ActionController/Base.html","","<p>Add class methods necessary for Scaffolding Extensions\n"],["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::Base","","ActiveRecord/Base.html","","<p>Add the class methods and instance methods from Scaffolding Extensions\n"],["Camping","","Camping.html","",""],["DataMapper","","DataMapper.html","",""],["Object","","Object.html","",""],["Ramaze","","Ramaze.html","",""],["Ramaze::Controller","","Ramaze/Controller.html","","<p>Add class methods necessary for Scaffolding Extensions\n"],["ScaffoldingExtensions","","ScaffoldingExtensions.html","","<p>This is the base module for the plugin.  It has some constants that can be\nchanged:\n<p>TEMPLATE_DIR - the …\n"],["ScaffoldingExtensions::ActionController","","ScaffoldingExtensions/ActionController.html","","<p>Instance methods for ActionController::Base necessary for Scaffolding\nExtensions\n"],["ScaffoldingExtensions::ActionControllerHelper","","ScaffoldingExtensions/ActionControllerHelper.html","","<p>Helper methods for ActionController::Base that override the defaults in\nScaffolding Extensions\n"],["ScaffoldingExtensions::ActiveRecord","","ScaffoldingExtensions/ActiveRecord.html","","<p>Instance methods added to ActiveRecord::Base to allow it to work with\nScaffolding Extensions.\n"],["ScaffoldingExtensions::CampingController","","ScaffoldingExtensions/CampingController.html","","<p>Instance methods for the Camping Controller related necessary for\nScaffolding Extensions\n"],["ScaffoldingExtensions::CampingHelper","","ScaffoldingExtensions/CampingHelper.html","",""],["ScaffoldingExtensions::Controller","","ScaffoldingExtensions/Controller.html","","<p>This holds instance methods that are shared between controllers.\n"],["ScaffoldingExtensions::DataMapper","","ScaffoldingExtensions/DataMapper.html","","<p>Instance methods added to DataMapper::Resource to allow it to work with\nScaffolding Extensions.\n"],["ScaffoldingExtensions::Helper","","ScaffoldingExtensions/Helper.html","","<p>Helper methods used by the scaffold templates\n"],["ScaffoldingExtensions::JQueryHelper","","ScaffoldingExtensions/JQueryHelper.html","","<p>Helper methods that require the JQuery Javascript library to work\n"],["ScaffoldingExtensions::MetaActionController","","ScaffoldingExtensions/MetaActionController.html","","<p>Class methods for ActionController::Base necessary for Scaffolding\nExtensions\n"],["ScaffoldingExtensions::MetaActiveRecord","","ScaffoldingExtensions/MetaActiveRecord.html","","<p>Class methods added to ActiveRecord::Base to allow it to work with\nScaffolding Extensions.\n"],["ScaffoldingExtensions::MetaCampingController","","ScaffoldingExtensions/MetaCampingController.html","","<p>Class methods for the Camping Controller necessary for Scaffolding\nExtensions\n"],["ScaffoldingExtensions::MetaController","","ScaffoldingExtensions/MetaController.html","","<p>Contains class methods shared across controllers\n"],["ScaffoldingExtensions::MetaDataMapper","","ScaffoldingExtensions/MetaDataMapper.html","","<p>Class methods added to DataMapper::Resource to allow it to work with\nScaffolding Extensions.\n"],["ScaffoldingExtensions::MetaModel","","ScaffoldingExtensions/MetaModel.html","","<p>Class methods shared by all models\n<p>Many class methods can be overridden for particular use cases by setting …\n"],["ScaffoldingExtensions::MetaOverridable","","ScaffoldingExtensions/MetaOverridable.html","",""],["ScaffoldingExtensions::MetaRamazeController","","ScaffoldingExtensions/MetaRamazeController.html","","<p>Class methods for Ramaze::Controller related necessary for Scaffolding\nExtensions\n"],["ScaffoldingExtensions::MetaSequel","","ScaffoldingExtensions/MetaSequel.html","","<p>Class methods added to Sequel::Model to allow it to work with Scaffolding\nExtensions.\n"],["ScaffoldingExtensions::MetaSinatraController","","ScaffoldingExtensions/MetaSinatraController.html","",""],["ScaffoldingExtensions::Model","","ScaffoldingExtensions/Model.html","","<p>Instance methods shared by all models\n"],["ScaffoldingExtensions::Overridable","","ScaffoldingExtensions/Overridable.html","",""],["ScaffoldingExtensions::PrototypeHelper","","ScaffoldingExtensions/PrototypeHelper.html","","<p>Helper methods that require the Prototype Javascript library to work\n"],["ScaffoldingExtensions::RackController","","ScaffoldingExtensions/RackController.html","",""],["ScaffoldingExtensions::RackController::Redirect","","ScaffoldingExtensions/RackController/Redirect.html","",""],["ScaffoldingExtensions::RamazeController","","ScaffoldingExtensions/RamazeController.html","","<p>Instance methods for Ramaze::Controller related necessary for Scaffolding\nExtensions\n"],["ScaffoldingExtensions::Sequel","","ScaffoldingExtensions/Sequel.html","","<p>Instance methods added to Sequel::Model to allow it to work with\nScaffolding Extensions.\n"],["ScaffoldingExtensions::SinatraController","","ScaffoldingExtensions/SinatraController.html","","<p>Instance methods for the anonymous class that acts as a Controller for\nSinatra\n"],["ScaffoldingExtensions::SinatraHelper","","ScaffoldingExtensions/SinatraHelper.html","",""],["Sequel","","Sequel.html","",""],["Sequel::Model","","Sequel/Model.html","","<p>Add the class methods and instance methods from Scaffolding Extensions\n"],["Sinatra","","Sinatra.html","",""],["Sinatra::Base","","Sinatra/Base.html","",""],["Test","","Test.html","",""],["Test::Unit","","Test/Unit.html","",""],["Test::Unit::TestCase","","Test/Unit/TestCase.html","","<p>Simple test framework to check that public facing pages without an id\nrespond successfully\n<p>This is only …\n"],["add_scaffolding_methods","Object","Object.html#method-i-add_scaffolding_methods","(classes)",""],["all_models","ScaffoldingExtensions","ScaffoldingExtensions.html#method-c-all_models","(options={})","<p>Takes two options, :only and :except.  If :only is given, :except is\nignored.  Either can contain model …\n"],["auto_complete_css","ScaffoldingExtensions","ScaffoldingExtensions.html#method-c-auto_complete_css","()","<p>The stylesheet for the autocompleting text box, or the empty string if\nauto_complete_skip_style is true. …\n"],["call","ScaffoldingExtensions::RackController","ScaffoldingExtensions/RackController.html#method-c-call","(env)",""],["call","ScaffoldingExtensions::RackController","ScaffoldingExtensions/RackController.html#method-i-call","(env)",""],["extended","ScaffoldingExtensions::Overridable","ScaffoldingExtensions/Overridable.html#method-c-extended","(klass)",""],["get_key_array_safe","Object","Object.html#method-i-get_key_array_safe","(key)",""],["get_ordering_options","Object","Object.html#method-i-get_ordering_options","(ordopts)",""],["javascript_library=","ScaffoldingExtensions","ScaffoldingExtensions.html#method-c-javascript_library-3D","(jslib)","<p>The javascript library to use (defaults to JQuery, can be set to\n&#39;Prototype&#39;)\n"],["scaffold_R","Object","Object.html#method-i-scaffold_R","(root)","<p>Create a route class, and automatically extend it with\nMetaCampingController so scaffold methods can …\n"],["scaffold_add_associated_object","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_add_associated_object","(association, object, associated_object)","<p>Add the associated object to the object&#39;s association\n"],["scaffold_add_associated_object","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_add_associated_object","(association, object, associated_object)","<p>Add the associated object to the object&#39;s association\n"],["scaffold_add_associated_object","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_add_associated_object","(association, object, associated_object)","<p>Add the associated object to the object&#39;s association\n"],["scaffold_add_associated_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_add_associated_objects","(association, object, options, *associated_object_ids)","<p>Add the objects specified by associated_object_ids to the given object\nusing the given association.  …\n"],["scaffold_all_associations","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_all_associations","()","<p>Array of all association reflections for this model\n"],["scaffold_all_associations","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_all_associations","()","<p>Array of all association reflections for this model only shows the\nassociations that are scaffolding_enabled …\n"],["scaffold_all_associations","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_all_associations","()","<p>Array of all association reflections for this model\n"],["scaffold_associated_class","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_associated_class","(association)","<p>The class that this model is associated with via the association\n"],["scaffold_associated_class","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_associated_class","(association)","<p>The class that this model is associated with via the association\n"],["scaffold_associated_class","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_associated_class","(association)","<p>The class that this model is associated with via the association\n"],["scaffold_associated_human_name","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_associated_human_name","(association)","<p>Return the human name for the given association, defaulting to humanizing\nthe association name\n"],["scaffold_associated_name","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_associated_name","(association)","<p>The scaffold_name of the associated class.  Not overridable, as that allows\nfor the possibility of broken …\n"],["scaffold_associated_objects","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_associated_objects","(association, object, options)","<p>All objects that are currently associated with the given object. This\nmethod does not check that the …\n"],["scaffold_associated_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_associated_objects","(association, object, options)","<p>All objects that are currently associated with the given object. This\nmethod does not check that the …\n"],["scaffold_associated_objects","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_associated_objects","(association, object, options)","<p>All objects that are currently associated with the given object. This\nmethod does not check that the …\n"],["scaffold_association","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_association","(association)","<p>The association reflection for this association\n"],["scaffold_association","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_association","(association)","<p>The association reflection for this association\n"],["scaffold_association","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_association","(association)","<p>The association reflection for this association\n"],["scaffold_association_find_object","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_association_find_object","(association, id, options)","<p>Finds a given object in the associated class that has the matching id.\n"],["scaffold_association_find_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_association_find_objects","(association, options)","<p>Find all objects of the associated class. Does not use any conditions of\nthe association (they are can&#39;t …\n"],["scaffold_association_type","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_association_type","(association)","<p>The type of association, either :new for :has_many (as you can create new\nobjects associated with the …\n"],["scaffold_association_type","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_association_type","(association)","<p>The type of association, either :new for :one_to_many (as you can create\nnew objects associated with …\n"],["scaffold_association_type","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_association_type","(association)","<p>The type of association, either :new for :one_to_many (as you can create\nnew objects associated with …\n"],["scaffold_association_use_auto_complete","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_association_use_auto_complete","(association)","<p>Whether to use autocompleting for linked associations. Defaults to whether\nthe associated class uses …\n"],["scaffold_associations","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_associations","()","<p>List of symbols for associations to display on the scaffolded edit page.\nDefaults to all associations …\n"],["scaffold_associations","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_associations","()","<p>List of symbols for associations to display on the scaffolded edit page.\nDefaults to all associations …\n"],["scaffold_associations","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_associations","()","<p>List of symbols for associations to display on the scaffolded edit page.\nDefaults to all associations. …\n"],["scaffold_attribute_value","ScaffoldingExtensions::ActiveRecord","ScaffoldingExtensions/ActiveRecord.html#method-i-scaffold_attribute_value","(field)","<p>Get value for given attribute\n"],["scaffold_attribute_value","ScaffoldingExtensions::DataMapper","ScaffoldingExtensions/DataMapper.html#method-i-scaffold_attribute_value","(field)","<p>Get value for given attribute\n"],["scaffold_attribute_value","ScaffoldingExtensions::Sequel","ScaffoldingExtensions/Sequel.html#method-i-scaffold_attribute_value","(field)","<p>Get value for given attribute\n"],["scaffold_auto_complete_associations","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_auto_complete_associations","()","<p>Defaults to associations specified by scaffold fields that are\nautocompleting. Can be set with an instance …\n"],["scaffold_auto_complete_find","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_auto_complete_find","(phrase, options = {})","<p>Return all records that match the given phrase (usually a substring of the\nmost important column).   …\n"],["scaffold_browse_find_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_browse_find_objects","(options)","<p>Separate method for browsing objects, as it also needs to return whether or\nnot there is another page …\n"],["scaffold_column_name","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_column_name","(column_name)","<p>Returns the human name for a given attribute.  Can be set via the instance\nvariable @scaffold_column_names, …\n"],["scaffold_column_options","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_column_options","(column_name)","<p>Returns any special options for a given attribute.  Can be set via the\ninstance variable @scaffold_column_options_hash, …\n"],["scaffold_column_type","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_column_type","(column_name)","<p>Returns the column type for the given scaffolded column name.  Can be set\nvia the instance variable @scaffold_column_types, …\n"],["scaffold_column_type_options","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_column_type_options","(type)","<p>The HTML options for a given column type, affecting all columns of that\ntype. Can be set with the @scaffold_column_type_options …\n"],["scaffold_default_action","ScaffoldingExtensions::MetaController","ScaffoldingExtensions/MetaController.html#method-i-scaffold_default_action","()",""],["scaffold_destroy","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_destroy","(object)","<p>Destroys the object\n"],["scaffold_destroy","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_destroy","(object)","<p>Destroys the object\n"],["scaffold_destroy","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_destroy","(object)","<p>Destroys the object\n"],["scaffold_error_messages","ScaffoldingExtensions::Model","ScaffoldingExtensions/Model.html#method-i-scaffold_error_messages","()","<p>an array of strings describing problems with the object (empty if none)\n"],["scaffold_error_raised","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_error_raised","()","<p>The error to raise, should match other errors raised by the underlying\nlibrary.\n"],["scaffold_error_raised","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_error_raised","()","<p>The error to raise, should match other errors raised by the underlying\nlibrary.\n"],["scaffold_error_raised","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_error_raised","()","<p>The error to raise, should match other errors raised by the underlying\nlibrary.\n"],["scaffold_field_id","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_field_id","(field)","<p>Returns the foreign key for the field if it is an association, or the field\nas a string if it is not. …\n"],["scaffold_fields","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_fields","(action = :default)","<p>Returns the list of fields to display on the scaffolded forms. Defaults to\ndisplaying all columns with …\n"],["scaffold_fields","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_fields","(action = :default)","<p>Returns the list of fields to display on the scaffolded forms. Defaults to\ndisplaying all columns with …\n"],["scaffold_fields","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_fields","(action = :default)","<p>Returns the list of fields to display on the scaffolded forms. Defaults to\ndisplaying all columns with …\n"],["scaffold_find_object","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_find_object","(action, id, options)","<p>Find the object of this model given by the id\n"],["scaffold_find_object","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_find_object","(*args)","<p>Set *_on_save_failure = false\n"],["scaffold_find_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_find_objects","(action, options)","<p>Find all objects of this model\n"],["scaffold_foreign_key","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_foreign_key","(reflection)","<p>The foreign key for the given reflection\n"],["scaffold_foreign_key","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_foreign_key","(reflection)","<p>The foreign key for the given reflection\n"],["scaffold_foreign_key","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_foreign_key","(reflection)","<p>The foreign key for the given reflection\n"],["scaffold_get_object","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_get_object","(id)","<p>Retrieve a single model object given an id\n"],["scaffold_get_object","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_get_object","(id)","<p>Retrieve a single model object given an id\n"],["scaffold_get_object","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_get_object","(id)","<p>Retrieve a single model object given an id\n"],["scaffold_get_objects","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_get_objects","(options)","<p>Retrieve multiple objects given a hash of options\n"],["scaffold_get_objects","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_get_objects","(options)","<p>Retrieve multiple objects given a hash of options\n"],["scaffold_get_objects","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_get_objects","(options)","<p>Retrieve multiple objects given a hash of options\n"],["scaffold_habtm_associations","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_habtm_associations","()","<p>Array of symbols for all habtm associations in this model&#39;s\nscaffold_associations. Can be set with …\n"],["scaffold_habtm_reflection_options","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_habtm_reflection_options","(association)","<p>Return the class, left foreign key, right foreign key, and join table for\nthis habtm association\n"],["scaffold_habtm_reflection_options","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_habtm_reflection_options","(association)","<p>Return the class, left foreign key, right foreign key, and join table for\nthis habtm association\n"],["scaffold_habtm_reflection_options","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_habtm_reflection_options","(association)","<p>Return the class, left foreign key, right foreign key, and join table for\nthis habtm association\n"],["scaffold_habtm_test","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-scaffold_habtm_test","(model, association, id)","<p>Test the habtm scaffold for singular class, many class, and the specific id\n"],["scaffold_human_name","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_human_name","()","<p>The human name string for this model. Can be set with an instance variable.\n"],["scaffold_id","ScaffoldingExtensions::ActiveRecord","ScaffoldingExtensions/ActiveRecord.html#method-i-scaffold_id","()","<p>the value of the primary key for this object\n"],["scaffold_id","ScaffoldingExtensions::DataMapper","ScaffoldingExtensions/DataMapper.html#method-i-scaffold_id","()","<p>the value of the primary key for this object\n"],["scaffold_id","ScaffoldingExtensions::Sequel","ScaffoldingExtensions/Sequel.html#method-i-scaffold_id","()","<p>the value of the primary key for this object\n"],["scaffold_include","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_include","(action = :default)","<p>Which associations to include when querying for multiple objects. Can be\nset with an instance variable. …\n"],["scaffold_merge_records","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_merge_records","(from, to, options)","<p>Merges the record with id from into the record with id to.  Updates all \nassociated records for the record …\n"],["scaffold_name","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_name","()","<p>The name string to use in urls, defaults to name.underscore.  Can be set\nwith an  instance variable. …\n"],["scaffold_name","ScaffoldingExtensions::Model","ScaffoldingExtensions/Model.html#method-i-scaffold_name","()","<p>The name given to the item that is used in various places in the scaffold. \nFor example, it is used whenever …\n"],["scaffold_name_with_id","ScaffoldingExtensions::Model","ScaffoldingExtensions/Model.html#method-i-scaffold_name_with_id","()","<p>scaffold_name prefixed with id, used for scaffold autocompleting\n"],["scaffold_new_associated_object_values","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_new_associated_object_values","(association, record)","<p>Returns a hash of values to be used as url parameters on the link to create\na new :has_many associated …\n"],["scaffold_new_associated_object_values","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_new_associated_object_values","(association, record)","<p>Returns a hash of values to be used as url parameters on the link to create\na new :has_many associated …\n"],["scaffold_new_associated_object_values","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_new_associated_object_values","(association, record)","<p>Returns a hash of values to be used as url parameters on the link to create\na new :has_many associated …\n"],["scaffold_new_object","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_new_object","(attributes, options)","<p>Creates a new object, setting the attributes if given.\n"],["scaffold_new_object","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_new_object","(*args)","<p>Set *_on_save_failure = false\n"],["scaffold_primary_key","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_primary_key","()","<p>The primary key for the given table\n"],["scaffold_primary_key","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_primary_key","()","<p>The primary key for the given table\n"],["scaffold_primary_key","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_primary_key","()","<p>The primary key for the given table\n"],["scaffold_remove_associated_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_remove_associated_objects","(association, object, options, *associated_object_ids)","<p>Removes associated objects with the given ids from the given object&#39;s\nassociation. Returns the associated …\n"],["scaffold_save","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_save","(action, object)","<p>Saves the object.\n"],["scaffold_save","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_save","(action, object)","<p>Saves the object.\n"],["scaffold_save","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_save","(action, object)","<p>Saves the object.\n"],["scaffold_search","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_search","(options)","<p>Searches for objects that meet the criteria specified by options:\n<p>:null: fields that must be must be  …\n"],["scaffold_search_null_options","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_search_null_options","()","<p>List of human visible names and field name symbols to use for NULL/NOT NULL\nfields on the scaffolded …\n"],["scaffold_search_object","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_search_object","(attributes = {})","<p>Returns a completely blank object suitable for searching, updated with the\ngiven attributes.\n"],["scaffold_select_order","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_select_order","(action = :default)","<p>The SQL ORDER BY fragment string.  Can be set with an instance variable.\n"],["scaffold_session","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-scaffold_session","()","<p>Default scaffold session hash to use.\n"],["scaffold_session_conditions","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_session_conditions","(session)","<p>The conditions array to use if scaffold_session_value is set, nil otherwise\n"],["scaffold_session_value_matches?","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_session_value_matches-3F","(object, session)","<p>True if the given object meets the scaffold_session_value criteria\n"],["scaffold_setup_helper","ScaffoldingExtensions::MetaSinatraController","ScaffoldingExtensions/MetaSinatraController.html#method-i-scaffold_setup_helper","()",""],["scaffold_setup_helper","ScaffoldingExtensions::RackController","ScaffoldingExtensions/RackController.html#method-c-scaffold_setup_helper","()",""],["scaffold_show_association_links?","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_show_association_links-3F","(association)","<p>Whether to show associations links for the given association.  Generally\ntrue unless  it is an :has_and_belongs_to_many …\n"],["scaffold_table_class","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_table_class","(type)","<p>Returns the scaffolded table class for a given scaffold type. Can be set\nwith the instance variable @scaffold_table_classes, …\n"],["scaffold_table_column_type","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_table_column_type","(column)","<p>The column type for the given table column, or nil if it isn&#39;t a table\ncolumn\n"],["scaffold_table_column_type","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_table_column_type","(c)","<p>The column type for the given table column, or nil if it isn&#39;t a table\ncolumn\n"],["scaffold_table_column_type","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_table_column_type","(column)","<p>Get the column type from the schema.  Sequel doesn&#39;t differentiate\nbetween string and text columns …\n"],["scaffold_table_name","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_table_name","()","<p>The name of the underlying table\n"],["scaffold_table_name","ScaffoldingExtensions::MetaDataMapper","ScaffoldingExtensions/MetaDataMapper.html#method-i-scaffold_table_name","()","<p>The name of the underlying table\n"],["scaffold_table_name","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_table_name","()","<p>The name of the underlying table\n"],["scaffold_template_dir","ScaffoldingExtensions::MetaController","ScaffoldingExtensions/MetaController.html#method-i-scaffold_template_dir","()","<p>The location of the scaffold templates\n"],["scaffold_test","Test::Unit::TestCase","Test/Unit/TestCase.html#method-i-scaffold_test","(model, options = {})","<p>Test that getting all display actions for the scaffold returns success\n"],["scaffold_transaction","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_transaction","(&block)","<p>Run the block inside a database transaction\n"],["scaffold_unassociated_objects","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_unassociated_objects","(association, object, options)","<p>Returns all objects of the associated class not currently associated with\nthis object.\n"],["scaffold_update_attributes","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_update_attributes","(object, attributes)","<p>Updates attributes for the given action, but does not save the record.\n"],["scaffold_use_auto_complete","ScaffoldingExtensions::MetaModel","ScaffoldingExtensions/MetaModel.html#method-i-scaffold_use_auto_complete","()","<p>Whether this class should use an autocompleting text box instead of a\nselect box for choosing items. …\n"],["scaffold_use_eager_graph","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-scaffold_use_eager_graph","()","<p>Whether to use eager_graph instead of eager for eager loading.  This is\nnecessary if you need to reference …\n"],["scaffold_use_references","ScaffoldingExtensions::MetaActiveRecord","ScaffoldingExtensions/MetaActiveRecord.html#method-i-scaffold_use_references","()","<p>Whether to use references in addition to includes for eager loading.  This\nis necessary if you need to …\n"],["scaffold_value","ScaffoldingExtensions::Model","ScaffoldingExtensions/Model.html#method-i-scaffold_value","(field)","<p>the value of the field if not an association, or the scaffold_name of the\nassociated object\n"],["test_scaffold","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test_scaffold","(model, options = {})","<p>Test the scaffold method using the same arguments as the method\n"],["test_scaffold_all_models","Test::Unit::TestCase","Test/Unit/TestCase.html#method-c-test_scaffold_all_models","(options = {})","<p>Test the scaffold_all_models method using the same arguments as the method\n"],["transaction","ScaffoldingExtensions::MetaSequel","ScaffoldingExtensions/MetaSequel.html#method-i-transaction","(&block)","<p>Sequel doesn&#39;t allow you to use transaction on a model (only on a\ndatabase), so add a transaction …\n"],["MIT-LICENSE","","MIT-LICENSE.html","","<p>Copyright © 2005-2012 Jeremy Evans\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README.html","","<p>ScaffoldingExtensions\n<p>Scaffolding Extensions provides a powerful and simple to use administrative\ninterface …\n"],["advanced","","doc/advanced_txt.html","","<p>Here are some advanced features of the plugin:\n<p>scaffold_session_value\n<p>You can define this attribute in …\n"],["camping","","doc/camping_txt.html","","<p>Camping doesn&#39;t have a defined folder structure for models, so\nscaffold_all_models shouldn&#39;t …\n"],["controller_spec","","doc/controller_spec_txt.html","","<p>To work with Scaffolding Extensions, the controller class needs to define\nthe following methods:\n<p>Instance …\n"],["conversion","","doc/conversion_txt.html","","<p>Conversion from an svn revision prior to 90 to the current version of\nScaffolding Extensions can be very …\n"],["datamapper","","doc/datamapper_txt.html","","<p>The DataMapper module has some quirks, mainly:\n<p>For models that have the “storage_name” explicitly …\n"],["merb","","doc/merb_txt.html","","<p>To use this plugin after installing the gem, somewhere in your Merb config,\nadd:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;scaffolding_extensions&#39;</span>\n</pre>\n"],["model_spec","","doc/model_spec_txt.html","","<p>To work with Scaffolding Extensions, the model class needs to define the\nfollowing methods:\n<p>Instance  …\n"],["rack","","doc/rack_txt.html","","<p>Scaffolding Extensions includes a native rack adapter that can run directly\non top of rack with no framework …\n"],["rails","","doc/rails_txt.html","","<p>Note that using Scaffolding Extensions with Rails requires that the Rails\napp has the catch-all route …\n"],["ramaze","","doc/ramaze_txt.html","","<p>To use this plugin after installing the gem:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;scaffolding_extensions&#39;</span>\n</pre>\n<p>If you want to use it without …\n"],["sinatra","","doc/sinatra_txt.html","","<p>Sinatra doesn&#39;t have a defined folder structure for models, so\nscaffold_all_models shouldn&#39;t …\n"],["testing","","doc/testing_txt.html","","<p>If you are using Rails and want some basic generic tests, you can run the\nfollowing code inside test_helper.rb …\n"]]}}